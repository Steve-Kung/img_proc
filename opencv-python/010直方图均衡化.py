'''
直方图
绘制直方图，直方图均衡化
直方图简单来说就是图像中每个像素值的个数统计，比如说一副灰度图中像素值为0的有多少个，1的多少个……
直方图是一种分析图片的手段
dims：要计算的通道数，对于灰度图dims=1
range：要计算的像素值范围，一般为[0,256]不包括256
bins：子区段数目，如bins=16
opencv函数：cv2.calcHist(), cv2.equalizeHist()
'''
# 导入相应的包
import cv2
import numpy as np
import matplotlib.pyplot as plt

# 定义相应的常量

# 定义相应的函数

# main函数

img = cv2.imread('002.jpg', 0)
ret, thresh = cv2.threshold(img, 100, 255, cv2.THRESH_BINARY)
edges = cv2.Canny(thresh, 30, 70)

# 计算直方图
# 参数1：要计算的原图，以方括号的传入，如：[img]
# 参数2：类似前面提到的dims，灰度图写[0]就行，彩色图B/G/R分别传入[0]/[1]/[2]
# 参数3：要计算的区域，计算整幅图的话，写None，如要计算的区域(采用mask：目标区域白色，其余黑色)
# 参数4：前面提到的bins
# 参数5：前面提到的range
hist = cv2.calcHist([img], [0], None, [256], [0, 256])

# 绘制直方图
plt.plot(hist)
plt.show()

# 直方图均衡化
# 一副效果好的图像通常在直方图上的分布比较均匀，
# 直方图均衡化就是用来改善图像的全局亮度和对比度
equ = cv2.equalizeHist(img)
cv2.imshow('equalization', np.hstack((img, equ)))  # 并排显示

# 自适应均衡化
# 它在每一个小区域内（默认8×8）进行直方图均衡化。
# 当然，如果有噪点的话，噪点会被放大，需要对小区域内的对比度进行了限制，
# 所以这个算法全称叫：对比度受限的自适应直方图均衡化CLAHE
# 自适应均衡化，参数可选
clahe = cv2.createCLAHE(clipLimit=2.0, tileGridSize=(8, 8))
cl1 = clahe.apply(img)
cv2.imshow('cl1', cl1)


cv2.waitKey(0)
cv2.destroyAllWindows()



'''
# ----------------------------------------------------------------------------------------------------------------

'''

'''
# ----------------------------------------------------------------------------------------------------------------

'''

'''
# ----------------------------------------------------------------------------------------------------------------

'''

'''
# ----------------------------------------------------------------------------------------------------------------

'''