'''
滤波和模糊
低通滤波器是模糊，高通滤波器是锐化
椒盐噪声：可以理解为斑点，随机出现在图像中的黑点或白点；
高斯噪声：可以理解为拍摄图片时由于光照等原因造成的噪声。
1. 滤波消除图片噪声
opencv函数：均值滤波cv2.blur(), 高斯滤波cv2.GaussianBlur(), 中值滤波cv2.medianBlur(), 双边滤波cv2.bilateralFilter()
* 在不知道用什么滤波器好的时候，优先高斯滤波cv2.GaussianBlur()，然后均值滤波cv2.blur()。
* 斑点和椒盐噪声优先使用中值滤波cv2.medianBlur()。
* 要去除噪点的同时尽可能保留更多的边缘信息，使用双边滤波cv2.bilateralFilter()。
* 线性滤波方式：均值滤波、方框滤波、高斯滤波（速度相对快）。
* 非线性滤波方式：中值滤波、双边滤波（速度相对慢）
'''
# 导入相应的包
import cv2

# 定义相应的常量

# 定义相应的函数

# main函数
# 均值滤波是一种最简单的滤波处理，它取的是卷积核区域内元素的均值
img = cv2.imread('002.jpg', 0)
cv2.imshow('img', img)
blur = cv2.blur(img, (3, 3))
cv2.imshow('blur', blur)

cv2.waitKey(0)  # 不断刷新图像,返回值为当前键盘按键值，如果不按键一直等待,0表示无限等待
# 销毁所有窗口
cv2.destroyAllWindows()



'''
# ----------------------------------------------------------------------------------------------------------------
# 方框滤波
# 用cv2.boxFilter()函数实现
# 当可选参数normalize为True的时候，方框滤波就是均值滤波，上式中的a就等于1/9；
# normalize为False的时候，a=1，相当于求区域内的像素和。
# 前面的均值滤波也可以用方框滤波实现：normalize=True
blur = cv2.boxFilter(img, -1, (3, 3), normalize=True)
'''

'''
# ----------------------------------------------------------------------------------------------------------------
# 高斯滤波
# 高斯滤波的卷积核权重并不相同：中间像素点权重最高，越远离中心的像素权重越小
# cv2.GaussianBlur(src,ksize,sigmaX)，σx值越大，模糊效果越明显
gaussian = cv2.GaussianBlur(img, (5, 5), 1)  # 高斯滤波
'''

'''
# ----------------------------------------------------------------------------------------------------------------
# 中值滤波
# 中值滤波就是用区域内的中值来代替本像素值，
# 所以那种孤立的斑点，如0或255很容易消除掉，适用于去除椒盐噪声和斑点噪声。
# 中值是一种非线性操作，效率相比前面几种线性滤波要慢
# cv2.GaussianBlur(src,ksize,sigmaX)，σx值越大，模糊效果越明显
median = cv2.medianBlur(img, 5)  # 中值滤波
'''

'''
# ----------------------------------------------------------------------------------------------------------------
# 双边滤波
# 模糊操作基本都会损失掉图像细节信息，尤其前面介绍的线性滤波器，图像的边缘信息很难保留下来。
# 然而，边缘（edge）信息是图像中很重要的一个特征，所以这才有了双边滤波。
# 用cv2.bilateralFilter()函数实现
blur = cv2.bilateralFilter(img, 9, 75, 75)  # 双边滤波
'''